Мысли по проекту
1. Выяснить как взаимодествуют между собой драйвер верхнего уровня (gpio_leds ?) и platform_driver bcm2708_gpio
2. Есть мысль не грузить драйвер верхнего уровня (занести его в blacklist) и рулить bcm2708_gpio из своего модуля.
3. Допустим мы по аналогии с официальным драйвером верхнего уровня создаем каталог /sys/class/gpio и в нем 2 файла 
export и unexport. После записи в файл /sys/class/gpio/export номера GPIO вывода, мы создаем каталог /sys/gpio/gpioN,
где N - номер GPIO контакта. В этом каталоге размещается файлы: mode, value, pwm_full, pwm_on. В файле mode содержится
и может быть записана одно из сдедующих значений: pwm, in, out. in - ввод значения при чтении value, out - вывод значения
записанного в value, pwm - программный PWM определяемый параметрами pwm_full и pwm_on 

Отчет по результам работ:

1. Как оказалось модули leds_gpio и led_class не создают каталог /sys/class/gpio. После занесения этих модулей в blacklist, каталог
/sys/class/gpio попрежнему создается и работает. Каталог создается драйвером arch/arm/mach-bcm2708/bcm2708_gpio.c, но не им самим 
(этого кода в его составе нет), а кодом drivers/gpio/gpiolib.c. Причем bcm2708_gpio.c не может быть собран в виде модуля (по крайней
мере в официальной версии исходников ядра raspbian):

config BCM2708_GPIO
        bool "BCM2708 gpio support"
        depends on MACH_BCM2708
        select ARCH_REQUIRE_GPIOLIB
        default y
        help
          Include support for the Broadcom(R) BCM2708 gpio.

Код gpiolib.c включается в ядро следующим образом:

config ARCH_REQUIRE_GPIOLIB
        bool
        select GPIOLIB
        help
          Platforms select gpiolib if they use this infrastructure
          for all their GPIOs, usually starting with ones integrated
          into SOC processors.
          Selecting this from the architecture code will cause the gpiolib
          code to always get built in.



menuconfig GPIOLIB
        bool "GPIO Support"
        depends on ARCH_WANT_OPTIONAL_GPIOLIB || ARCH_REQUIRE_GPIOLIB
        select GENERIC_GPIO
        help
          This enables GPIO support through the generic GPIO library.
          You only need to enable this, if you also want to enable
          one or more of the GPIO drivers below.

          If unsure, say N.

Для создания каталога /sys/class/gpio должна быть включена поддержка файловой системы SYSFS:

config GPIO_SYSFS
        bool "/sys/class/gpio/... (sysfs interface)"
        depends on SYSFS && EXPERIMENTAL
        help
          Say Y here to add a sysfs interface for GPIOs.

          This is mostly useful to work around omissions in a system's
          kernel support.  Those are common in custom and semicustom
          hardware assembled using standard kernels with a minimum of
          custom patches.  In those cases, userspace code may import
          a given GPIO from the kernel, if no kernel driver requested it.

          Kernel drivers may also request that a particular GPIO be
          exported to userspace; this can be useful when debugging.
          
Т.е мы можем либо включить bcm2708_gpio в ядро, либо не собирать вовсе. Но это оказалось даже к лучшему: нет необходимости выгружать
драйвер верхнего уровня для того что-бы управлять GPIO (тем более, что драйвера верхнего уровня нет). Существует функция 

int gpio_request_one(unsigned gpio, unsigned long flags, const char *label);

, которая позволяет захватить управление конкретной ногой GPIO. 
После того как прекращаем использовать эту ногу, ее нужно отдать при помощи функции:

void gpio_free(unsigned gpio);

где gpio - номер ноги

flags - как мы собираемся ее использовать:
    #define GPIOF_DIR_OUT   (0 << 0)
    #define GPIOF_DIR_IN    (1 << 0)
    #define GPIOF_INIT_LOW  (0 << 1)
    #define GPIOF_INIT_HIGH (1 << 1)
    #define GPIOF_IN                (GPIOF_DIR_IN)
    #define GPIOF_OUT_INIT_LOW      (GPIOF_DIR_OUT | GPIOF_INIT_LOW)
    #define GPIOF_OUT_INIT_HIGH     (GPIOF_DIR_OUT | GPIOF_INIT_HIGH)
    /* Gpio pin is open drain */
    #define GPIOF_OPEN_DRAIN        (1 << 2)
    /* Gpio pin is open source */
    #define GPIOF_OPEN_SOURCE       (1 << 3)
    #define GPIOF_EXPORT            (1 << 4)
    #define GPIOF_EXPORT_CHANGEABLE (1 << 5)
    #define GPIOF_EXPORT_DIR_FIXED  (GPIOF_EXPORT)
    #define GPIOF_EXPORT_DIR_CHANGEABLE (GPIOF_EXPORT | GPIOF_EXPORT_CHANGEABLE)

label - произвольное текстовое описание кода захватившего ногу, например: "soft_pwm"

После успешного запроса ноги, ей можно управлять:

int gpio_get_value(unsigned gpio);
void gpio_set_value(unsigned gpio, int value);

2. Для того что-бы собрать в режиме кросс компиляции свой модуль ядра небходимо иметь собранное ядро на host машине. 
Источник: http://www.grendelman.net/wp/cross-compiling-kernel-modules-for-raspbian/
С учетом того, что у меня уже стоял toolchain для сборки программ под Raspberry Pi в /opt/tools из git://github.com/raspberrypi/tools.git, 
процесс выглядел следующим образом:

igor@igoral5 ~ $ mkdir raspberry
igor@igoral5 ~ $ cd raspberry/
igor@igoral5 ~/raspberry $ git clone https://github.com/raspberrypi/linux.git
igor@igoral5 ~/raspberry $ cd linux

Берем  конфиг ядра с работающей raspberry:

igor@igoral5 ~/raspberry/linux $ scp pi@192.168.100.139:/proc/config.gz .
igor@igoral5 ~/raspberry/linux $ zcat config.gz > .config
igor@igoral5 ~/raspberry/linux $ make -j 4 ARCH=arm CROSS_COMPILE=/opt/tools/arm-bcm2708/arm-bcm2708-linux-gnueabi/bin/arm-bcm2708-linux-gnueabi- oldconfig
igor@igoral5 ~/raspberry/linux $ make -j 4 ARCH=arm CROSS_COMPILE=/opt/tools/arm-bcm2708/arm-bcm2708-linux-gnueabi/bin/arm-bcm2708-linux-gnueabi- zImage
igor@igoral5 ~/raspberry/linux $ make -j 4 ARCH=arm CROSS_COMPILE=/opt/tools/arm-bcm2708/arm-bcm2708-linux-gnueabi/bin/arm-bcm2708-linux-gnueabi- modules
igor@igoral5 ~/raspberry/linux $ sudo make -j 4 ARCH=arm CROSS_COMPILE=/opt/tools/arm-bcm2708/arm-bcm2708-linux-gnueabi/bin/arm-bcm2708-linux-gnueabi- zinstall
igor@igoral5 ~/raspberry/linux $ sudo make -j 4 ARCH=arm CROSS_COMPILE=/opt/tools/arm-bcm2708/arm-bcm2708-linux-gnueabi/bin/arm-bcm2708-linux-gnueabi- modules_install
igor@igoral5 ~/raspberry/linux $ cd /boot
igor@igoral5 /boot $ sudo tar zcvpf kernel.tgz config-3.6.11+ System.map-3.6.11+ vmlinuz-3.6.11+
igor@igoral5 /boot $ scp kernel.tgz pi@192.168.100.139:/home/pi
igor@igoral5 /boot $ cd /lib/modules
igor@igoral5 /lib/modules $ sudo tar zcvpf modules.tgz 3.6.11+/
igor@igoral5 /lib/modules $ scp modules.tgz pi@192.168.100.139:/home/pi

Установка нового ядра на Raspberry Pi:

igor@igoral5 /lib/modules $ ssh pi@192.168.100.139
pi@raspberrypi ~ $ sudo mv kernel.tgz /boot
pi@raspberrypi ~ $ sudo mv modules.tgz /lib/modules/
pi@raspberrypi ~ $ cd /boot
pi@raspberrypi /boot $ sudo tar zxvpf kernel.tgz
pi@raspberrypi /boot $ sudo mv vmlinuz-3.6.11+ kernel.img
pi@raspberrypi /boot $ cd /lib/modules
pi@raspberrypi /lib/modules $ sudo tar zxvpf modules.tgz
pi@raspberrypi /lib/modules $ sudo reboot

Сборка своего модуля для Raspberry Pi:

igor@igoral5 ~/raspberry/kernel_pwm $ make -C $HOME/raspberry/linux ARCH=arm CROSS_COMPILE=/opt/tools/arm-bcm2708/arm-bcm2708-linux-gnueabi/bin/arm-bcm2708-linux-gnueabi- SUBDIRS=$PWD modules
make: Вход в каталог `/home/igor/raspberry/linux'
  CC [M]  /home/igor/raspberry/kernel_pwm/soft_pwm.o
  Building modules, stage 2.
  MODPOST 1 modules
  CC      /home/igor/raspberry/kernel_pwm/soft_pwm.mod.o
  LD [M]  /home/igor/raspberry/kernel_pwm/soft_pwm.ko
make: Выход из каталога `/home/igor/raspberry/linux'
igor@igoral5 ~/raspberry/kernel_pwm $ scp soft_pwm.ko pi@192.168.100.139:/home/pi/work

Загрузка модуля на Raspberry Pi:

pi@raspberrypi ~/work $ sudo insmod soft_pwm.ko

Выгрузка модуля:

pi@raspberrypi ~/work $ sudo rmmod soft_pwm

Выводы по результам тестирования модуля:

Для формирования задержек заданной длительности можно использовать msleep или udelay, у каждого из этих способов есть свои достоинства и недостатки:

Достоинства msleep:

1. Блокирует вызвавший ее процесс, что освобождает процессор для выполнения других процессов.

Недостатки msleep:

1. Слишком большое значение минимальной единицы задержки в 1 милисекунду. Типичная частота PWM 500 Hz, это соотвествует длительности 2 милисекунды,
тогда для изменения широты импульса остаются только 3 значения: 0 (импульса нет совсем), 1 (половина цикла), 2 (целый цикл). Примем частоту PWM 50 Hz -
типичная частота управления серво-приводом, теперь у нас есть 21 градация. Но натурные эксперементы показывают, что msleep при небольших значениях
0..100 выдает значительно большие задержки, связанные с накладными расходами на переключение процессов и указанная нами задержка представляет небольшую
часть от реальной задержки, причем эта дополнительная задержка имеет случайных характер и зависит от текущй загрузки процессора. Вследствии этого
реально регулировать широту импульса не удается.

Достоинства udelay:

1. Точноя задержка, длительность которой указывается в микросекундах.

Недостатки udelay:

1. Использование активного ожидания для формирования задержки. Т.е. процессор крутиться в тугом цикле, на каждой итерации проверяя не истекло ли время.
Фактически весь процессор необходим для выполениея цикла PWM, что без использования преемптивного ядра, может вызвать большие проблемы, вплоть до
остановки работы ядра. На преемптивном ядре (именно такое используется дистрибутивом Rasbian) управление одним PWM вполне удовлетворительное, при практически
100% загрузке процессора. Если же пытаться использовать два PWM, между ними возникает состязательность за использование процессора и формируемые ими
PWM циклы изменяются случайным образом, в зависимости от того, кто в текущий момент это состязание выигрывает.

Окончательный вывод: подобную технологию не следует использовать, если мы хотим получить стабильные циклы PWM.

